#!/usr/bin/env ruby
require 'rubygems'
require 'date'
require 'yaml'
require 'icalendar'



class LEWT
  @@dateStart
  @@dateEnd
  @@calFile
  @@clients = YAML.load_file('config/clients.yaml')
  @@clientBillStore = Hash.new
  
  def initialize( dateStart = DateTime.now , dateEnd = DateTime.now, file =  "/users/jwijeswww/documents/development.ics" )
    @@dateStart = dateStart
    @@dateEnd = dateEnd
    @@calFile = file
    self.loadClientBillStore()
    self.run()
  end
  
  # the routine
  def run
    cals = Icalendar.parse( File.open( @@calFile ) )
    cals.each do |cal|
      cal.events.each do |event|
        eStart =  event.dtstart
        eEnd = event.dtend
        eDescription = event.description
        eCustomer = self.isBillableEvent( event )
        if  self.isTargetDate(eStart) == true && eCustomer != false
          evtHoursBillable = ( eEnd.to_time - eStart.to_time ) / 60 / 60
          bill = {
            "client" => eCustomer,
            "hours" => evtHoursBillable,
            "cost" => evtHoursBillable * eCustomer["rate"],
            "eStart" => eStart,
            "eEnd" => eEnd,
            "eDescription" => eDescription
          }
          @@clientBillStore[ eCustomer["name"] ].push( bill )
        end
      end
    end
    self.outputBills()
  end
  
  # iterates client bills and saves them to local dir
  def outputBills
    @@clientBillStore.each do |client|
      clientDeets = client[1][0]["client"]
      markdown = self.getMarkdownHeader( clientDeets )
      subtotal = 0;
      tax = 0;
      total = 0

      client[1].each do |bill|
        dStart = bill["eStart"].strftime("%d/%m/%y %H:%M")
        dEnd = bill["eEnd"].strftime("%d/%m/%y %H:%M")
        descriptionAdjust = bill["eDescription"] != "" ? "\n\n" + bill["eDescription"] + "\n\n" : "\n\n"
        markdown <<  "#{dStart} - #{dEnd}: #{ bill['hours']}hrs @ rate $#{bill['client']['rate']} = **$#{bill['cost']}**#{descriptionAdjust}"
        subtotal += bill["cost"]
      end

      tax = subtotal * 0.1
      total = subtotal + tax
      markdown << self.getMarkdownFooter( subtotal, tax, total )
      filepath = clientDeets["invoice_directory"] << clientDeets["name"] << " " << @@dateStart.strftime("%Y-%m-%d") << " " << @@dateEnd.strftime("%Y-%m-%d") << ".md"
      File.open(filepath, 'w+') {|f| f.write(markdown) }
    end
  end

  def getMarkdownFooter( subtotal, tax, total )
    footer = File.open("templates/invoice-footer.md", "rb").read
    footer.gsub! "{subtotal}", subtotal.to_s
    footer.gsub! "{tax}", tax.to_s
    footer.gsub! "{total}", total.to_s
    return footer
  end

  def getMarkdownHeader ( client ) 
    header = File.open("templates/invoice-header.md", "rb").read
    header.gsub! "{from}", @@dateStart.strftime("%d/%m/%y")
    header.gsub! "{to}", @@dateEnd.strftime("%d/%m/%y")
    header.gsub! "{company}", client["name"]
    header.gsub! "{contact}", client['contact']['name']
    header.gsub! "{business_number}", client['business_number'].to_s
    header.gsub! "{address}", "#{client['address']['lines']},  \n#{client['address']['city']}, #{client['address']['postal']},  \n#{client['address']['country']}"
    return header
  end

  def loadClientBillStore
    @@clients.each do |client|
      @@clientBillStore[ client["name"] ] = Array.new
    end
  end
  
  # references the event title against clients for matching
  # billable events
  def isBillableEvent ( evt )
    eTitle = evt.summary
    match = false
    @@clients.each do |client|
      if client["name"] == eTitle || client["alias"] == eTitle
        match = client
      end
    end
    return match
  end
  
  # checks whether event date is within target range
  def isTargetDate ( date ) 
    d = date.to_date
    check = false
    if d >= @@dateStart.to_date && d <= @@dateEnd.to_date
      check = true
    end
    return check
  end

  # checks whether on same day
  def isSameDay ( base, compare ) 
    return base.to_date == compare.to_date ? true : false
  end

end


class Customer
 attr_accessor :name, :address, :contact, :business_number, :alias
end

# cmd line args default check and init

to = ARGV[0]
from = ARGV[1]

if to != nil and from != nil
  run = LEWT.new( DateTime.parse(to), DateTime.parse(from) )
elsif
  run LEWT.new
end

