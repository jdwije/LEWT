#!/usr/bin/env ruby
require 'rubygems'
require 'date'
require 'yaml'
require 'icalendar'

load "lib/extractor.rb"
load "lib/billing.rb"

class LEWT

  def initialize( )
    @clients = YAML.load_file('./config/clients.yaml')
    @company = YAML.load_file('./config/company.yaml')
    @settings = YAML.load_file('./config/settings.yaml')
    self.parseCommands
  end
  
  def parseCommands
    # evts = Extractor.new( "/users/jwijeswww/documents/development.ics", DateTime.parse("01-05-2014"), DateTime.parse("28-05-2014"), ["TTS","MD", "Media Dynamics"] )
    # run = Billing.new( evts.data )
    command = ARGV[0]
    if command == nil || command == "all"
      puts "no command given"
    elsif command == "invoice"
         matchData = self.loadClientMatchData(ARGV[1])
         dStart =  DateTime.parse( ARGV[2] ) != false ? DateTime.parse(ARGV[2]) : DateTime.now - (60*60*24*7)
         dEnd = DateTime.parse( ARGV[3] ) != false ? DateTime.parse(ARGV[3]) : DateTime.now
      rawEvents = Extractor.new( @settings["ical_filepath"], dStart, dEnd, matchData )
      bills = Billing.new( rawEvents.data )
    end
  end

  def loadClientMatchData( query )
    requestedClients = Array.new
    if query == nil
      @clients.each do |client|
        requestedClients.push(client["name"])
        requestedClients.push(client["alias"])
      end
    else
      requestedClients = Array.new
      @clients.each do |client|
        query.split(",").each do |q|
          if [client["alias"], client["name"]].include?(q) == true 
            requestedClients.push(client["name"])
            requestedClients.push(client["alias"])
          end
        end
      end
    end
    return requestedClients
  end

end



LEWT.new

# cmd line args default check and init
#to = ARGV[0]
#from = ARGV[1]

#if to != nil and from != nil
  #run = LEWT.new( DateTime.parse(to), DateTime.parse(from) )
#elsif
 # run LEWT.new
#end

