#!/usr/bin/env ruby
require 'rubygems'
require 'date'
require 'yaml'
require 'icalendar'
require 'optparse'

load "lib/extractor.rb"
load "lib/gcal_extractor.rb"
load "lib/billing.rb"
load "lib/formatter.rb"

class LEWT

  def initialize( )
    @clients = YAML.load_file('./config/clients.yaml')
    @company = YAML.load_file('./config/company.yaml')
    @settings = YAML.load_file('./config/settings.yaml')
    self.parseCommands
  end
  
  def parseCommands

    options = {}
    OptionParser.new do |opts|
      opts.banner = "Usage: example.rb [options]"

      opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
        options["verbose"] = v
      end

      opts.on("-t", "--target [STRING]", String, "Execute on target client") do |t|
        options["target"] = t
      end

      opts.on("-s", "--date-start [DATE]", String, "Start date of billing period") do |sD|
        options["start"] = sD
      end

      opts.on("-e", "--date-end [DATE]", String, "End date of billing period") do |eD|
        options["end"] = eD 
      end


      opts.on("-m", "--method [STRING]", String, "End date of billing periodWhat extractor to use") do |m|
        options["method"] = m
      end

    end.parse!
    
    command = ARGV[0]
    target = options["target"]
    
    if command == nil || command == "all"
      puts "no command given to lewt. invoke with <cmd> eg: lewt invoice 'client_alias'"
    elsif command == "invoice"
      matchData = self.loadClientMatchData(target)
      dStart =  options["start"] != nil ? DateTime.parse(options["start"]) : DateTime.now - 7
      dEnd = options["end"] != nil ? DateTime.parse(options["end"]) : DateTime.now

      if options["method"] == nil || options["method"] == "iCal"
        rawEvents = Extractor.new( @settings["ical_filepath"], dStart, dEnd, matchData )
      elsif  options["method"] == "gCal"
        rawEvents = GCalExtractor.new( dStart, dEnd, matchData )
      end
      bills = Billing.new( rawEvents.data, target )
    end
  end

  def loadClientMatchData( query )
    requestedClients = Array.new
    if query == nil
      @clients.each do |client|
        requestedClients.push(client["name"])
        requestedClients.push(client["alias"])
      end
    else
      requestedClients = Array.new
      @clients.each do |client|
        query.split(",").each do |q|
          if [client["alias"], client["name"]].include?(q) == true 
            requestedClients.push(client["name"])
            requestedClients.push(client["alias"])
          end
        end
      end
    end
    return requestedClients
  end

end



LEWT.new

# cmd line args default check and init
#to = ARGV[0]
#from = ARGV[1]

#if to != nil and from != nil
  #run = LEWT.new( DateTime.parse(to), DateTime.parse(from) )
#elsif
 # run LEWT.new
#end

